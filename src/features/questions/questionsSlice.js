import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getQuestions } from './questionsAPI';

const initialState = {
    questions: [],
    state: 'idle'
};

export const getQuestionsAsync = createAsyncThunk(
    'questions/get',
    async () => {
        const response = await getQuestions();
        return response.data;
    }
);

export const questionSlice = createSlice({
    name: 'questions',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        getQuestionsDetails: (state, action) => {
            state.questions = action.payload;
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getQuestionsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getQuestionsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                debugger
                state.questions = action.payload;
            });
    },
});

export const { getQuestionsDetails } = questionSlice.actions;
export const questionsSelect = (state) => state.questions;
console.log(questionsSelect);

export default questionSlice.reducer;
